{"version":3,"sources":["firebase/firebase.js","firebase/auth.js","firebase/db.js","components/SignOut.js","constants/routes.js","components/Navigation.js","components/Landing.js","components/SignUp.js","components/PasswordForget.js","components/SignIn.js","components/withAuthorization.js","components/Home.js","components/PasswordChange.js","components/Account.js","components/App.js","components/withAuthentication.js","stores/sessionStore.js","stores/userStore.js","stores/index.js","registerServiceWorker.js","index.js"],"names":["config","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","firebase","apps","length","initializeApp","db","database","auth","doCreateUserWithEmailAndPassword","email","password","createUserWithEmailAndPassword","doSignInWithEmailAndPassword","signInWithEmailAndPassword","doSignOut","signOut","doPasswordReset","sendPasswordResetEmail","doPasswordUpdate","currentUser","updatePassword","doCreateUser","id","username","ref","concat","set","onceGetUsers","once","SignOutButton","react_default","a","createElement","type","onClick","HOME","NavigationAuth","Link","to","routes","SignOut","NavigationNonAuth","compose","inject","observer","_ref","sessionStore","authUser","Navigation_NavigationAuth","Navigation_NavigationNonAuth","LandingPage","INITIAL_STATE","passwordOne","passwordTwo","error","byPropKey","propertyName","value","Object","defineProperty","SignUpForm","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onSubmit","event","_this$state","state","history","then","user","uid","setState","objectSpread","push","catch","preventDefault","_this2","_this$state2","isInvalid","onChange","target","placeholder","disabled","message","Component","SignUpLink","withRouter","SignUp_SignUpForm","PasswordForgetForm","PasswordForgetLink","PasswordForget","PasswordForget_PasswordForgetForm","SignInForm","SignIn_SignInForm","PasswordForget_PasswordForgetLink","SignUp_SignUpLink","withAuthorization","condition","WithAuthorization","_React$Component","apply","arguments","inherits","createClass","key","onAuthStateChanged","React","HomePage","users","userStore","snapshot","setUsers","val","Home_UserList","UserList","keys","map","PasswordChangeForm","Account","PasswordChange","withAuthentication","WithAuthentication","setAuthUser","App","BrowserRouter","components_Navigation","Route","exact","path","component","SignUpPage","SignInPage","PasswordForgetPage","AccountPage","SessionStore","rootStore","initializerDefineProperty","_descriptor","_descriptor2","observable","action","UserStore","userStore_descriptor","userStore_descriptor2","configure","enforceActions","RootStore","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","ReactDOM","render","index_module","store","components_App","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.ddfd89c0.chunk.js","sourcesContent":["import firebase from 'firebase/app';\nimport 'firebase/auth';\nimport 'firebase/database';\n\nconst prodConfig = {\n    apiKey: \"AIzaSyA9v3GrTjCsoM5MT-V2NnEqGsA37NuQOfE\",\n    authDomain: \"my-first-app-dfd97.firebaseapp.com\",\n    databaseURL: \"https://my-first-app-dfd97.firebaseio.com\",\n    projectId: \"my-first-app-dfd97\",\n    storageBucket: \"my-first-app-dfd97.appspot.com\",\n    messagingSenderId: \"1021669950976\"\n};\n\nconst devConfig = {\n    apiKey: \"AIzaSyA9v3GrTjCsoM5MT-V2NnEqGsA37NuQOfE\",\n    authDomain: \"my-first-app-dfd97.firebaseapp.com\",\n    databaseURL: \"https://my-first-app-dfd97.firebaseio.com\",\n    projectId: \"my-first-app-dfd97\",\n    storageBucket: \"my-first-app-dfd97.appspot.com\",\n    messagingSenderId: \"1021669950976\"\n};\n\nconst config = process.env.NODE_ENV === 'production' ? prodConfig : devConfig;\n\nif(!firebase.apps.length){\n    firebase.initializeApp(config);\n}\n\nconst db = firebase.database();\nconst auth = firebase.auth();\n\nexport {\n    db,\n    auth,\n};","import { auth } from './firebase';\n\n\n//Sign UP\nexport const doCreateUserWithEmailAndPassword = (email, password) =>\n    auth.createUserWithEmailAndPassword(email, password);\n\n//Sign In\nexport const doSignInWithEmailAndPassword = (email, password) =>\n    auth.signInWithEmailAndPassword(email, password);\n\n//Sign Out\nexport const doSignOut = () =>\n    auth.signOut();\n\n//Password Reset\nexport const doPasswordReset = (email) =>\n    auth.sendPasswordResetEmail(email);\n\n//Password change\nexport const doPasswordUpdate = (password) =>\n    auth.currentUser.updatePassword(password);","import { db } from './firebase';\n\n// User API\n\nexport const doCreateUser = (id, username, email) =>\n    db.ref(`users/${id}`).set({\n        username,\n        email,\n    });\n\nexport const onceGetUsers = () =>\n    db.ref('users').once('value');\n\n// Other Entity APIs ...","import React from 'react';\nimport {auth} from \"../firebase\";\n\nconst SignOutButton = () =>\n    <button\n        type={\"button\"}\n        onClick={auth.doSignOut}\n    >\n        Sign Out\n    </button>\n\nexport default SignOutButton;","export const SIGN_UP = '/signup';\nexport const SIGN_IN = '/signin';\nexport const LANDING = '/';\nexport const HOME = '/home';\nexport const ACCOUNT = '/account';\nexport const PASSWORD_FORGET = '/pw-forget';","import React from 'react';\nimport { inject, observer } from 'mobx-react';\nimport { compose } from 'recompose';\nimport { Link } from 'react-router-dom';\n\nimport SignOutButton from './SignOut';\nimport * as routes from '../constants/routes';\n\nconst Navigation = ({ sessionStore }) =>\n    <div>\n        { sessionStore.authUser\n            ? <NavigationAuth />\n            : <NavigationNonAuth />\n        }\n    </div>\n\nconst NavigationAuth = () =>\n    <ul>\n        <li><Link to={routes.LANDING}>Landing</Link></li>\n        <li><Link to={routes.HOME}>Home</Link></li>\n        <li><Link to={routes.ACCOUNT}>Account</Link></li>\n        <li><SignOutButton /></li>\n    </ul>\n\nconst NavigationNonAuth = () =>\n    <ul>\n        <li><Link to={routes.LANDING}>Landing</Link></li>\n        <li><Link to={routes.SIGN_IN}>Sign In</Link></li>\n    </ul>\n\nexport default compose(\n    inject('sessionStore'),\n    observer\n)(Navigation);","import React from 'react';\n\nconst LandingPage = () =>\n    <div>\n        <h1>Landign page</h1>\n    </div>\n\nexport default LandingPage;\n","import React, {Component} from 'react';\nimport {Link, withRouter} from 'react-router-dom';\n\nimport { auth, db } from '../firebase';\nimport * as routes from '../constants/routes';\n\nconst SignUpPage = ({ history }) =>\n    <div>\n        <h1>Sign Up</h1>\n        <SignUpForm history={ history }/>\n    </div>\n\nconst INITIAL_STATE = {\n    username: '',\n    email: '',\n    passwordOne: '',\n    passwordTwo: '',\n    error: null\n};\n\nconst byPropKey = (propertyName, value) => () => ({\n    [propertyName]: value,\n});\n\nclass SignUpForm extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {...INITIAL_STATE};\n    }\n\n    onSubmit = (event) => {\n        const {\n            username,\n            email,\n            passwordOne,\n        } = this.state;\n\n        const {\n            history,\n\n        }= this.props\n\n        auth.doCreateUserWithEmailAndPassword(email, passwordOne)\n            .then(authUser => {\n                // Create a user in your own accessible Firebase Database too\n                db.doCreateUser(authUser.user.uid, username, email)\n                    .then(() => {\n                        this.setState({...INITIAL_STATE});\n                        history.push(routes.HOME);\n                    })\n                    .catch(error => {\n                        this.setState(byPropKey('error', error));\n                    });\n            })\n            .catch(error => {\n                this.setState(byPropKey('error', error));\n            });\n        event.preventDefault();\n    }\n\n    render() {\n        const {\n            username,\n            email,\n            passwordOne,\n            passwordTwo,\n            error,\n        } = this.state;\n\n        const isInvalid =\n            passwordOne !== passwordTwo ||\n            passwordOne === '' ||\n            email === '' ||\n            username === ''\n\n        return (\n            <form onSubmit={this.onSubmit}>\n                <input\n                    value={username}\n                    onChange={event => this.setState(byPropKey('username', event.target.value))}\n                    type={\"text\"}\n                    placeholder={\"Full Name\"}\n                />\n                <input\n                    value={email}\n                    onChange={event => this.setState(byPropKey('email', event.target.value))}\n                    type=\"text\"\n                    placeholder=\"Email Address\"\n                />\n                <input\n                    value={passwordOne}\n                    onChange={event => this.setState(byPropKey('passwordOne', event.target.value))}\n                    type=\"password\"\n                    placeholder=\"Password\"\n                />\n                <input\n                    value={passwordTwo}\n                    onChange={event => this.setState(byPropKey('passwordTwo', event.target.value))}\n                    type=\"password\"\n                    placeholder=\"Confirm Password\"\n                />\n                <button disabled={isInvalid} type=\"submit\">\n                    Sign Up\n                </button>\n                {error && <p>{error.message}</p>}\n            </form>\n        )\n    }\n}\n\nconst SignUpLink = () =>\n    <p>\n        Don't have account?\n        {' '}\n        <Link to={routes.SIGN_UP}>Sign Up</Link>\n    </p>\n\nexport default withRouter(SignUpPage);\n\nexport {\n    SignUpForm,\n    SignUpLink,\n};","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\n\nimport { auth } from '../firebase';\nimport * as routes from '../constants/routes';\n\nconst PasswordForgetPage = () =>\n    <div>\n        <h1>PasswordForget</h1>\n        <PasswordForgetForm />\n    </div>\n\nconst byPropKey = (propertyName, value) => () => ({\n    [propertyName]: value,\n});\n\nconst INITIAL_STATE = {\n    email: '',\n    error: null,\n};\n\nclass PasswordForgetForm extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = { ...INITIAL_STATE };\n    }\n\n    onSubmit = (event) => {\n        const { email } = this.state;\n\n        auth.doPasswordReset(email)\n            .then(() => {\n                this.setState({ ...INITIAL_STATE });\n            })\n            .catch(error => {\n                this.setState(byPropKey('error', error));\n            });\n\n        event.preventDefault();\n    }\n\n    render() {\n        const {\n            email,\n            error,\n        } = this.state;\n\n        const isInvalid = email === '';\n\n        return (\n            <form onSubmit={this.onSubmit}>\n                <input\n                    value={this.state.email}\n                    onChange={event => this.setState(byPropKey('email', event.target.value))}\n                    type=\"text\"\n                    placeholder=\"Email Address\"\n                />\n                <button disabled={isInvalid} type=\"submit\">\n                    Reset My Password\n                </button>\n\n                { error && <p>{error.message}</p> }\n            </form>\n        );\n    }\n}\n\nconst PasswordForgetLink = () =>\n    <p>\n        <Link to={routes.PASSWORD_FORGET}>Forgot Password?</Link>\n    </p>\n\nexport default PasswordForgetPage;\n\nexport {\n    PasswordForgetForm,\n    PasswordForgetLink,\n};","import React, { Component } from 'react';\nimport { withRouter } from 'react-router-dom';\n\nimport { SignUpLink } from \"./SignUp\";\nimport { PasswordForgetLink } from './PasswordForget';\nimport { auth } from \"../firebase\";\nimport * as routes from '../constants/routes';\n\nconst SignInPage = ({ history }) =>\n    <div>\n        <h1>Sign In</h1>\n        <SignInForm history={history} />\n        <PasswordForgetLink />\n        <SignUpLink />\n    </div>\n\nconst byPropKey = (propertyName, value) => () => ({\n   [propertyName] : value\n});\n\n\nconst INITIAL_STATE ={\n    email: '',\n    password: '',\n    error: null,\n};\n\nclass SignInForm extends Component{\n    constructor(props){\n        super(props);\n        this.state = {...INITIAL_STATE};\n    }\n\n    onSubmit = (event) =>{\n        const {\n            email,\n            password\n        } = this.state;\n\n        const {\n            history,\n        } = this.props;\n\n        auth.doSignInWithEmailAndPassword(email, password)\n            .then(() => {\n                this.setState({...INITIAL_STATE});\n                history.push(routes.HOME);\n            })\n            .catch( error => {\n                this.setState(byPropKey('error', error));\n            });\n        event.preventDefault();\n    }\n\n    render(){\n        const {\n            email,\n            password,\n            error,\n        } = this.state;\n\n        const isInvalid = password === '' || email === '';\n\n        return (\n            <form onSubmit={this.onSubmit}>\n                <input\n                value={email}\n                onChange={event => this.setState(byPropKey('email', event.target.value))}\n                type={\"text\"}\n                placeholder={\"Email Address\"}\n                />\n\n                <input\n                    value={password}\n                    onChange={event => this.setState(byPropKey('password', event.target.value))}\n                    type={\"password\"}\n                    placeholder={\"Password\"}\n                />\n                <button disabled={isInvalid} type={\"submit\"}>Sign In</button>\n                {error && <p>{error.message}</p>}\n            </form>\n        )\n    }\n}\n\nexport default withRouter(SignInPage);\n\nexport {\n    SignInForm,\n};","import React from 'react';\nimport { withRouter } from 'react-router-dom';\nimport { inject, observer } from 'mobx-react';\nimport { compose } from 'recompose';\n\nimport { firebase } from '../firebase';\nimport * as routes from '../constants/routes';\n\nconst withAuthorization = (condition) => (Component) => {\n    class WithAuthorization extends React.Component {\n        componentDidMount() {\n            firebase.auth.onAuthStateChanged(authUser => {\n                if (!condition(authUser)) {\n                    this.props.history.push(routes.SIGN_IN);\n                }\n            });\n        }\n\n        render() {\n            return this.props.sessionStore.authUser ? <Component {...this.props} /> : null;\n        }\n    }\n\n    return compose(\n        withRouter,\n        inject('sessionStore'),\n        observer\n    )(WithAuthorization);\n}\n\nexport default withAuthorization;","import React, { Component } from 'react';\nimport { inject, observer } from 'mobx-react';\nimport { compose } from 'recompose';\n\nimport withAuthorization from './withAuthorization';\nimport { db } from '../firebase';\n\nclass HomePage extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            users: null,\n        };\n    }\n\n    componentDidMount() {\n        const { userStore } = this.props;\n\n        db.onceGetUsers().then(snapshot =>\n            userStore.setUsers(snapshot.val())\n        );\n    }\n\n    render() {\n        const { users } = this.props.userStore;\n        return (\n            <div>\n                <h1>Home</h1>\n                <p>The Home Page is accessible by every signed in user.</p>\n                { !!users && <UserList users={users} /> }\n            </div>\n        );\n    }\n}\n\nconst UserList = ({ users }) =>\n    <div>\n        <h2>List of Usernames of Users</h2>\n        <p>(Saved on Sign Up in Firebase Database)</p>\n\n        {Object.keys(users).map(key =>\n            <div key={key}>{users[key].username}</div>\n        )}\n    </div>\n\nconst mapStateToProps = (state) => ({\n    users: state.userState.users,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n    onSetUsers: (users) => dispatch({ type: 'USERS_SET', users }),\n});\n\nconst authCondition = (authUser) => !!authUser;\n\nexport default compose(\n    withAuthorization(authCondition),\n    inject('userStore'),\n    observer\n)(HomePage);","import React, { Component } from 'react';\n\nimport { auth } from '../firebase';\n\nconst byPropKey = (propertyName, value) => () => ({\n    [propertyName]: value,\n});\n\nconst INITIAL_STATE = {\n    passwordOne: '',\n    passwordTwo: '',\n    error: null,\n};\n\nclass PasswordChangeForm extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = { ...INITIAL_STATE };\n    }\n\n    onSubmit = (event) => {\n        const { passwordOne } = this.state;\n\n        auth.doPasswordUpdate(passwordOne)\n            .then(() => {\n                this.setState({ ...INITIAL_STATE });\n            })\n            .catch(error => {\n                this.setState(byPropKey('error', error));\n            });\n\n        event.preventDefault();\n    }\n\n    render() {\n        const {\n            passwordOne,\n            passwordTwo,\n            error,\n        } = this.state;\n\n        const isInvalid =\n            passwordOne !== passwordTwo ||\n            passwordOne === '';\n\n        return (\n            <form onSubmit={this.onSubmit}>\n                <input\n                    value={passwordOne}\n                    onChange={event => this.setState(byPropKey('passwordOne', event.target.value))}\n                    type=\"password\"\n                    placeholder=\"New Password\"\n                />\n                <input\n                    value={passwordTwo}\n                    onChange={event => this.setState(byPropKey('passwordTwo', event.target.value))}\n                    type=\"password\"\n                    placeholder=\"Confirm New Password\"\n                />\n                <button disabled={isInvalid} type=\"submit\">\n                    Reset My Password\n                </button>\n\n                { error && <p>{error.message}</p> }\n            </form>\n        );\n    }\n}\n\nexport default PasswordChangeForm;","import React from 'react';\nimport { inject, observer } from 'mobx-react';\nimport { compose } from 'recompose';\n\nimport { PasswordForgetForm } from './PasswordForget';\nimport PasswordChangeForm from './PasswordChange';\nimport withAuthorization from './withAuthorization';\n\nconst AccountPage = ({ sessionStore }) =>\n    <div>\n        <h1>Account: {sessionStore.authUser.email}</h1>\n        <PasswordForgetForm />\n        <PasswordChangeForm />\n    </div>\n\nconst authCondition = (authUser) => !!authUser;\n\nexport default compose(\n    withAuthorization(authCondition),\n    inject('sessionStore'),\n    observer\n)(AccountPage);","import React, { Component } from 'react';\nimport {BrowserRouter as Router, Route} from 'react-router-dom';\n\nimport Navigation from './Navigation';\nimport LandingPage from './Landing';\nimport SignUpPage from './SignUp';\nimport SignInPage from './SignIn';\nimport PasswordForgetPage from './PasswordForget';\nimport HomePage from './Home';\nimport AccountPage from './Account';\n\nimport * as routes from '../constants/routes';\nimport { firebase } from '../firebase';\n\nimport withAuthentication from './withAuthentication';\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            authUser: null,\n        };\n    }\n\n    componentDidMount(){\n        firebase.auth.onAuthStateChanged(authUser => {\n            authUser ? this.setState({ authUser }) : this.setState({ authUser: null});\n        });\n    }\n\n    render() {\n        return (\n            <Router>\n                <div>\n                    <Navigation authUser={this.state.authUser} />\n                    <hr/>\n                    <Route exact path={routes.LANDING} component={LandingPage} />\n                    <Route exact path={routes.SIGN_UP} component={SignUpPage} />\n                    <Route exact path={routes.SIGN_IN} component={SignInPage} />\n                    <Route exact path={routes.PASSWORD_FORGET} component={PasswordForgetPage} />\n                    <Route exact path={routes.HOME} component={HomePage} />\n                    <Route exact path={routes.ACCOUNT} component={AccountPage} />\n                </div>\n            </Router>\n        );\n    }\n}\nexport default withAuthentication(App);","import React from 'react';\nimport { inject } from 'mobx-react';\n\nimport { firebase } from '../firebase';\n\nconst withAuthentication = (Component) => {\n    class WithAuthentication extends React.Component {\n        componentDidMount() {\n            const { sessionStore } = this.props;\n\n            firebase.auth.onAuthStateChanged(authUser => {\n                authUser\n                    ? sessionStore.setAuthUser(authUser)\n                    : sessionStore.setAuthUser(null);\n            });\n        }\n\n        render() {\n            return (\n                <Component {...this.props} />\n            );\n        }\n    }\n\n    return inject('sessionStore')(WithAuthentication);\n}\n\nexport default withAuthentication;","import { observable, action } from 'mobx';\n\nclass SessionStore {\n\n    @observable authUser = null;\n\n    constructor(rootStore) {\n        this.rootStore = rootStore;\n    }\n\n    @action setAuthUser = authUser => {\n        this.authUser = authUser;\n    }\n}\n\nexport default SessionStore;","import { observable, action } from 'mobx';\n\nclass UserStore {\n    @observable users = [];\n\n    constructor(rootStore) {\n        this.rootStore = rootStore;\n    }\n\n    @action setUsers = users => {\n        this.users = users;\n    }\n}\n\nexport default UserStore;","import { configure } from 'mobx';\n\nimport SessionStore from './sessionStore';\nimport UserStore from './userStore';\n\nconfigure({ enforceActions: true });\n\nclass RootStore {\n    constructor() {\n        this.sessionStore = new SessionStore(this);\n        this.userStore = new UserStore(this);\n    }\n}\n\nconst rootStore = new RootStore();\n\nexport default rootStore;","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (!isLocalhost) {\n                // Is not local host. Just register service worker\n                registerValidSW(swUrl);\n            } else {\n                // This is running on localhost. Lets check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the old content will have been purged and\n                            // the fresh content will have been added to the cache.\n                            // It's the perfect time to display a \"New content is\n                            // available; please refresh.\" message in your web app.\n                            console.log('New content is available; please refresh.');\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n                        }\n                    }\n                };\n            };\n        })\n        .catch(error => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl)\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            if (\n                response.status === 404 ||\n                response.headers.get('content-type').indexOf('javascript') === -1\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl);\n            }\n        })\n        .catch(() => {\n            console.log(\n                'No internet connection found. App is running in offline mode.'\n            );\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready.then(registration => {\n            registration.unregister();\n        });\n    }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'mobx-react';\nimport './index.css';\nimport App from './components/App';\nimport store from './stores';\n\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(\n    <Provider { ...store }>\n        <App />\n    </Provider>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nregisterServiceWorker();\n"],"sourceRoot":""}